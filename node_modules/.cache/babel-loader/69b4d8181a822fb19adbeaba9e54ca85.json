{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\ngota\\\\OneDrive\\\\Documents\\\\GitHub\\\\WebBanDienThoai\\\\CMD_WebBanDienThoai\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleGetList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchGetList),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { takeEvery, fork, all, call, put } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport ProductsActions, { ProductsActionTypes } from \"../actions/products\";\nimport { getAllProducts } from \"../apis/products\";\nimport { getImage } from \"../apis/cloudinary\";\n\nfunction handleGetList(_ref) {\n  var payload, result, data, result2;\n  return _regeneratorRuntime.wrap(function handleGetList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(getAllProducts, payload);\n\n        case 4:\n          result = _context.sent;\n          data = get(result, \"data\");\n          console.log(\"data\", data.product.bigimage);\n          _context.next = 9;\n          return call(getImage, data.product.bigimage);\n\n        case 9:\n          result2 = _context.sent;\n          console.log(\"result2\", result2);\n          _context.next = 13;\n          return put(ProductsActions.onGetListSuccess(data.product));\n\n        case 13:\n          _context.next = 19;\n          break;\n\n        case 15:\n          _context.prev = 15;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 19;\n          return put(ProductsActions.onGetListError(_context.t0));\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 15]]);\n}\n/* function* handleGetDetail({ filters, id }) {\n  try {\n    const result = yield call(EcommerceApi.Product.getDetail, id);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    yield put(ProductsActions.onGetDetailSuccess(data));\n  } catch (error) {\n    message.error(get(error, \"msg\", \"Error when get detail!\"));\n    yield put(ProductsActions.onGetDetailError(error));\n  }\n} */\n\n/**\n *\n * create\n */\n\n/* function* handleCreate({ payload, filters, callback, merchant_id }) {\n  console.log(\"load\",payload);\n  try {\n    const result = yield call(EcommerceApi.Product.create, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    message.success(\"Create product success!\");\n    if (callback) {\n      callback();\n    }\n    yield put(ProductsActions.onCreateSuccess(data));\n    yield put(ProductsActions.onGetList(filters));\n    if(merchant_id){\n      yield put(MerchantActions.onGetListProduct({id:merchant_id}));\n    }\n  } catch (error) {\n    console.log(error);\n    message.error(get(error, \"msg\", \"Error when create product!\"));\n    yield put(ProductsActions.onCreateError(error));\n  }\n} */\n\n/**\n *\n * update\n */\n\n/* function* handleUpdate({ payload, filters, callback, merchant_id }) {\n\n  try {\n    const result = yield call(EcommerceApi.Product.update, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    message.success(\"Update product success!\");\n    if (callback) {\n      callback();\n    }\n\n    const detailResult = yield call(EcommerceApi.Product.getDetail, payload.id);\n    yield put(ProductsActions.onUpdateSuccess(get(detailResult, \"data\")));\n    yield put(ProductsActions.onGetList(filters));\n    if(merchant_id){\n      yield put(MerchantActions.onGetListProduct({id:merchant_id}));\n    }\n  } catch (error) {\n    console.log(error);\n    message.error(get(error, \"msg\", \"Error when Update product!\"));\n    yield put(ProductsActions.onUpdateError(error));\n  }\n} */\n\n/**\n *\n * delete\n */\n\n/* function* handleDelete({ id, filters, callback, merchant_id }) {\n  try {\n    const result = yield call(EcommerceApi.Product.delete, id);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    message.success(\"Delete product success!\");\n    if (callback) {\n      callback();\n    }\n    yield put(ProductsActions.onDeleteSuccess(data));\n    yield put(ProductsActions.onGetList(filters));\n    if(merchant_id){\n      yield put(MerchantActions.onGetListProduct({id:merchant_id}));\n    }\n  } catch (error) {\n    console.log(error);\n    message.error(get(error, \"msg\", \"Error when Delete product!\"));\n    yield put(ProductsActions.onDeleteError(error));\n  }\n} */\n\n/**\n *\n */\n\n\nexport function watchGetList() {\n  return _regeneratorRuntime.wrap(function watchGetList$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(ProductsActionTypes.GET_LIST, handleGetList);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n/* export function* watchGetDetail() {\n  yield takeEvery(ProductsActionTypes.GET_DETAIL, handleGetDetail);\n}\n\nexport function* watchCreate() {\n  yield takeEvery(ProductsActionTypes.CREATE, handleCreate);\n}\nexport function* watchUpdate() {\n  yield takeEvery(ProductsActionTypes.UPDATE, handleUpdate);\n}\nexport function* watchDelete() {\n  yield takeEvery(ProductsActionTypes.DELETE, handleDelete);\n} */\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchGetList)\n          /* fork(watchGetDetail),\n          fork(watchCreate),\n          fork(watchUpdate),\n          fork(watchDelete), */\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/ngota/OneDrive/Documents/GitHub/WebBanDienThoai/CMD_WebBanDienThoai/src/redux/sagas/products.js"],"names":["handleGetList","watchGetList","rootSaga","takeEvery","fork","all","call","put","get","ProductsActions","ProductsActionTypes","getAllProducts","getImage","payload","result","data","console","log","product","bigimage","result2","onGetListSuccess","onGetListError","GET_LIST"],"mappings":";;oDAMUA,a;qDA2GOC,Y;qDAkBQC,Q;;AAnIzB,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,GAArC,QAAgD,oBAAhD;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,eAAP,IAA0BC,mBAA1B,QAAqD,qBAArD;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,QAAT,QAAyB,oBAAzB;;AAEA,SAAUZ,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0Ba,UAAAA,OAA1B,QAA0BA,OAA1B;AAAA;AAAA;AAEmB,iBAAMP,IAAI,CAACK,cAAD,EAAiBE,OAAjB,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAGUC,UAAAA,IAHV,GAGiBP,GAAG,CAACM,MAAD,EAAS,MAAT,CAHpB;AAIIE,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBF,IAAI,CAACG,OAAL,CAAaC,QAAhC;AAJJ;AAKoB,iBAAMb,IAAI,CAACM,QAAD,EAAWG,IAAI,CAACG,OAAL,CAAaC,QAAxB,CAAV;;AALpB;AAKUC,UAAAA,OALV;AAMIJ,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBG,OAAtB;AANJ;AAOI,iBAAMb,GAAG,CAACE,eAAe,CAACY,gBAAhB,CAAiCN,IAAI,CAACG,OAAtC,CAAD,CAAT;;AAPJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASI,iBAAMX,GAAG,CAACE,eAAe,CAACa,cAAhB,aAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;;;;;;;;;;;;AAYA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;AAGA,OAAO,SAAUrB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAME,SAAS,CAACO,mBAAmB,CAACa,QAArB,EAA+BvB,aAA/B,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP;;;;;;;;;;;;;;AAcA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMG,GAAG,CAAC,CACRD,IAAI,CAACH,YAAD;AACJ;;;;AAFQ,WAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, fork, all, call, put } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport ProductsActions, { ProductsActionTypes } from \"../actions/products\";\nimport { getAllProducts } from \"../apis/products\";\nimport { getImage } from \"../apis/cloudinary\";\n\nfunction* handleGetList({ payload }) {\n  try {\n    const result = yield call(getAllProducts, payload);\n    const data = get(result, \"data\");\n    console.log(\"data\",data.product.bigimage)\n    const result2 = yield call(getImage, data.product.bigimage);\n    console.log(\"result2\",result2)\n    yield put(ProductsActions.onGetListSuccess(data.product));\n  } catch (error) {\n    yield put(ProductsActions.onGetListError(error));\n  }\n}\n\n/* function* handleGetDetail({ filters, id }) {\n  try {\n    const result = yield call(EcommerceApi.Product.getDetail, id);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    yield put(ProductsActions.onGetDetailSuccess(data));\n  } catch (error) {\n    message.error(get(error, \"msg\", \"Error when get detail!\"));\n    yield put(ProductsActions.onGetDetailError(error));\n  }\n} */\n\n/**\n *\n * create\n */\n/* function* handleCreate({ payload, filters, callback, merchant_id }) {\n  console.log(\"load\",payload);\n  try {\n    const result = yield call(EcommerceApi.Product.create, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    message.success(\"Create product success!\");\n    if (callback) {\n      callback();\n    }\n    yield put(ProductsActions.onCreateSuccess(data));\n    yield put(ProductsActions.onGetList(filters));\n    if(merchant_id){\n      yield put(MerchantActions.onGetListProduct({id:merchant_id}));\n    }\n  } catch (error) {\n    console.log(error);\n    message.error(get(error, \"msg\", \"Error when create product!\"));\n    yield put(ProductsActions.onCreateError(error));\n  }\n} */\n\n/**\n *\n * update\n */\n/* function* handleUpdate({ payload, filters, callback, merchant_id }) {\n\n  try {\n    const result = yield call(EcommerceApi.Product.update, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    message.success(\"Update product success!\");\n    if (callback) {\n      callback();\n    }\n\n    const detailResult = yield call(EcommerceApi.Product.getDetail, payload.id);\n    yield put(ProductsActions.onUpdateSuccess(get(detailResult, \"data\")));\n    yield put(ProductsActions.onGetList(filters));\n    if(merchant_id){\n      yield put(MerchantActions.onGetListProduct({id:merchant_id}));\n    }\n  } catch (error) {\n    console.log(error);\n    message.error(get(error, \"msg\", \"Error when Update product!\"));\n    yield put(ProductsActions.onUpdateError(error));\n  }\n} */\n\n/**\n *\n * delete\n */\n/* function* handleDelete({ id, filters, callback, merchant_id }) {\n  try {\n    const result = yield call(EcommerceApi.Product.delete, id);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    message.success(\"Delete product success!\");\n    if (callback) {\n      callback();\n    }\n    yield put(ProductsActions.onDeleteSuccess(data));\n    yield put(ProductsActions.onGetList(filters));\n    if(merchant_id){\n      yield put(MerchantActions.onGetListProduct({id:merchant_id}));\n    }\n  } catch (error) {\n    console.log(error);\n    message.error(get(error, \"msg\", \"Error when Delete product!\"));\n    yield put(ProductsActions.onDeleteError(error));\n  }\n} */\n\n/**\n *\n */\nexport function* watchGetList() {\n  yield takeEvery(ProductsActionTypes.GET_LIST, handleGetList);\n}\n\n/* export function* watchGetDetail() {\n  yield takeEvery(ProductsActionTypes.GET_DETAIL, handleGetDetail);\n}\n\nexport function* watchCreate() {\n  yield takeEvery(ProductsActionTypes.CREATE, handleCreate);\n}\nexport function* watchUpdate() {\n  yield takeEvery(ProductsActionTypes.UPDATE, handleUpdate);\n}\nexport function* watchDelete() {\n  yield takeEvery(ProductsActionTypes.DELETE, handleDelete);\n} */\n\nexport default function* rootSaga() {\n  yield all([\n    fork(watchGetList),\n    /* fork(watchGetDetail),\n    fork(watchCreate),\n    fork(watchUpdate),\n    fork(watchDelete), */\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}