{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\ngota\\\\OneDrive\\\\Documents\\\\GitHub\\\\WebBanDienThoai\\\\CMD_WebBanDienThoai\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { get\n/*  cloneDeep */\n} from \"lodash\";\nimport { ProductsActionTypes } from \"../actions/products\";\nvar init = {\n  loading: true,\n  detail: null,\n  processing: false\n};\n/* function handleUpdate({state, action}) {\n  const list = cloneDeep(state.list);\n  const detailData = get(action, \"payload.data\");\n  const index = list.findIndex(i => i.id === detailData.id);\n  console.log(\"index\", index);\n  if (index !== -1) {\n    list[index] = {...list[index], ...detailData};\n  }\n  return {\n    ...state,\n    processing: false,\n    list,\n    detail: {\n      ...state.detail,\n      data: { ...state.detail.data, ...detailData },\n    },\n  };\n} */\n\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : init;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ProductsActionTypes.CLEAR_DETAIL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        detail: null,\n        loadingDetail: true\n      });\n\n    case ProductsActionTypes.CLEAR_STATE:\n      return _objectSpread({}, init);\n\n    case ProductsActionTypes.GET_LIST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n\n    case ProductsActionTypes.GET_LIST_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false\n        /*apiResultGetList: omit(get(action, \"payload\"), [\"data\"]), */\n\n      });\n\n    case ProductsActionTypes.GET_LIST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        total: get(action, \"payload.total\"),\n        list: get(action, \"payload.list\", [])\n      });\n\n    case ProductsActionTypes.GET_DETAIL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loadingDetail: true,\n        detail: null\n      });\n\n    case ProductsActionTypes.GET_DETAIL_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loadingDetail: false,\n        detail: action.payload\n      });\n\n    case ProductsActionTypes.GET_DETAIL_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loadingDetail: false,\n        detail: action.payload\n      });\n\n    case ProductsActionTypes.CREATE:\n    case ProductsActionTypes.UPDATE_IMAGE:\n    case ProductsActionTypes.DELETE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: true\n      });\n\n    case ProductsActionTypes.CREATE_ERROR:\n    case ProductsActionTypes.UPDATE_IMAGE_ERROR:\n    case ProductsActionTypes.DELETE_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: false\n      });\n\n    case ProductsActionTypes.UPDATE_IMAGE_SUCCESS:\n      //return handleUpdate({state, action});\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: true\n      });\n\n    case ProductsActionTypes.CREATE_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loadingDetail: false,\n        detail: action.payload\n      });\n\n    case ProductsActionTypes.DELETE_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: false\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/ngota/OneDrive/Documents/GitHub/WebBanDienThoai/CMD_WebBanDienThoai/src/redux/reducers/products.js"],"names":["get","ProductsActionTypes","init","loading","detail","processing","state","action","type","CLEAR_DETAIL","loadingDetail","CLEAR_STATE","GET_LIST","GET_LIST_ERROR","GET_LIST_SUCCESS","total","list","GET_DETAIL","GET_DETAIL_SUCCESS","payload","GET_DETAIL_ERROR","CREATE","UPDATE_IMAGE","DELETE","CREATE_ERROR","UPDATE_IMAGE_ERROR","DELETE_ERROR","UPDATE_IMAGE_SUCCESS","CREATE_SUCCESS","DELETE_SUCCESS"],"mappings":";AAAA,SAASA;AAAK;AAAd,OAAsC,QAAtC;AACA,SAASC,mBAAT,QAAoC,qBAApC;AAEA,IAAMC,IAAI,GAAG;AACXC,EAAAA,OAAO,EAAE,IADE;AAEXC,EAAAA,MAAM,EAAE,IAFG;AAGXC,EAAAA,UAAU,EAAE;AAHD,CAAb;AAMA;;;;;;;;;;;;;;;;;;;AAmBA,eAAe,YAA+B;AAAA,MAAtBC,KAAsB,uEAAdJ,IAAc;AAAA,MAARK,MAAQ;;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,mBAAmB,CAACQ,YAAzB;AACE,6CACKH,KADL;AAEEF,QAAAA,MAAM,EAAE,IAFV;AAGEM,QAAAA,aAAa,EAAE;AAHjB;;AAMF,SAAKT,mBAAmB,CAACU,WAAzB;AACE,+BACKT,IADL;;AAIF,SAAKD,mBAAmB,CAACW,QAAzB;AACE,6CACKN,KADL;AAEEH,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKF,mBAAmB,CAACY,cAAzB;AACE,6CACKP,KADL;AAEGH,QAAAA,OAAO,EAAE;AACV;;AAHF;;AAMF,SAAKF,mBAAmB,CAACa,gBAAzB;AACE,6CACKR,KADL;AAEES,QAAAA,KAAK,EAAEf,GAAG,CAACO,MAAD,EAAS,eAAT,CAFZ;AAGES,QAAAA,IAAI,EAAEhB,GAAG,CAACO,MAAD,EAAS,cAAT,EAAyB,EAAzB;AAHX;;AAMF,SAAKN,mBAAmB,CAACgB,UAAzB;AACE,6CACKX,KADL;AAEEI,QAAAA,aAAa,EAAE,IAFjB;AAGEN,QAAAA,MAAM,EAAE;AAHV;;AAMF,SAAKH,mBAAmB,CAACiB,kBAAzB;AACE,6CACKZ,KADL;AAEEI,QAAAA,aAAa,EAAE,KAFjB;AAGEN,QAAAA,MAAM,EAAEG,MAAM,CAACY;AAHjB;;AAMF,SAAKlB,mBAAmB,CAACmB,gBAAzB;AACE,6CACKd,KADL;AAEEI,QAAAA,aAAa,EAAE,KAFjB;AAGEN,QAAAA,MAAM,EAAEG,MAAM,CAACY;AAHjB;;AAMF,SAAKlB,mBAAmB,CAACoB,MAAzB;AACA,SAAKpB,mBAAmB,CAACqB,YAAzB;AACA,SAAKrB,mBAAmB,CAACsB,MAAzB;AACE,6CACKjB,KADL;AAEED,QAAAA,UAAU,EAAE;AAFd;;AAKF,SAAKJ,mBAAmB,CAACuB,YAAzB;AACA,SAAKvB,mBAAmB,CAACwB,kBAAzB;AACA,SAAKxB,mBAAmB,CAACyB,YAAzB;AACE,6CACKpB,KADL;AAEED,QAAAA,UAAU,EAAE;AAFd;;AAIF,SAAKJ,mBAAmB,CAAC0B,oBAAzB;AACE;AACA,6CACKrB,KADL;AAEED,QAAAA,UAAU,EAAE;AAFd;;AAIF,SAAKJ,mBAAmB,CAAC2B,cAAzB;AACE,6CACKtB,KADL;AAEEI,QAAAA,aAAa,EAAE,KAFjB;AAGEN,QAAAA,MAAM,EAAEG,MAAM,CAACY;AAHjB;;AAKF,SAAKlB,mBAAmB,CAAC4B,cAAzB;AACE,6CACKvB,KADL;AAEED,QAAAA,UAAU,EAAE;AAFd;;AAIF;AACE,aAAOC,KAAP;AAtFJ;AAwFD","sourcesContent":["import { get, /*  cloneDeep */ } from \"lodash\";\nimport { ProductsActionTypes } from \"../actions/products\";\n\nconst init = {\n  loading: true,\n  detail: null,\n  processing: false,\n};\n\n/* function handleUpdate({state, action}) {\n  const list = cloneDeep(state.list);\n  const detailData = get(action, \"payload.data\");\n  const index = list.findIndex(i => i.id === detailData.id);\n  console.log(\"index\", index);\n  if (index !== -1) {\n    list[index] = {...list[index], ...detailData};\n  }\n  return {\n    ...state,\n    processing: false,\n    list,\n    detail: {\n      ...state.detail,\n      data: { ...state.detail.data, ...detailData },\n    },\n  };\n} */\n\nexport default function(state = init, action) {\n  switch (action.type) {\n    case ProductsActionTypes.CLEAR_DETAIL:\n      return {\n        ...state,\n        detail: null,\n        loadingDetail: true,\n      };\n\n    case ProductsActionTypes.CLEAR_STATE:\n      return {\n        ...init,\n      };\n\n    case ProductsActionTypes.GET_LIST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case ProductsActionTypes.GET_LIST_ERROR:\n      return {\n        ...state,\n         loading: false,\n        /*apiResultGetList: omit(get(action, \"payload\"), [\"data\"]), */\n      };\n\n    case ProductsActionTypes.GET_LIST_SUCCESS:\n      return {\n        ...state,\n        total: get(action, \"payload.total\"),\n        list: get(action, \"payload.list\", []),\n      };\n\n    case ProductsActionTypes.GET_DETAIL:\n      return {\n        ...state,\n        loadingDetail: true,\n        detail: null,\n      };\n\n    case ProductsActionTypes.GET_DETAIL_SUCCESS:\n      return {\n        ...state,\n        loadingDetail: false,\n        detail: action.payload,\n      };\n\n    case ProductsActionTypes.GET_DETAIL_ERROR:\n      return {\n        ...state,\n        loadingDetail: false,\n        detail: action.payload,\n      };\n\n    case ProductsActionTypes.CREATE:\n    case ProductsActionTypes.UPDATE_IMAGE:\n    case ProductsActionTypes.DELETE:\n      return {\n        ...state,\n        processing: true,\n      };\n\n    case ProductsActionTypes.CREATE_ERROR:\n    case ProductsActionTypes.UPDATE_IMAGE_ERROR:\n    case ProductsActionTypes.DELETE_ERROR:\n      return {\n        ...state,\n        processing: false,\n      };\n    case ProductsActionTypes.UPDATE_IMAGE_SUCCESS:\n      //return handleUpdate({state, action});\n      return {\n        ...state,\n        processing: true,\n      };\n    case ProductsActionTypes.CREATE_SUCCESS:\n      return {\n        ...state,\n        loadingDetail: false,\n        detail: action.payload,\n      };\n    case ProductsActionTypes.DELETE_SUCCESS:\n      return {\n        ...state,\n        processing: false,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}