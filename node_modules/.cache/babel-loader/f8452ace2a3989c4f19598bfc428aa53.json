{"ast":null,"code":"import _regeneratorRuntime from \"/Users/vyduong/Downloads/CMD_WebBanDienThoai/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleGetNewest),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleGetList),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleCreate),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(handleUpdate),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(handleUpdateAll),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(handleDelete),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(handleDeleteAll),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchGetNewest),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchGetList),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchCreate),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchUpdate),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchDelete),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchUpdateAll),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchDeleteAll),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { takeEvery, fork, all, call, put } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport NotificationActions, { NotificationActionTypes } from \"../actions/notification\";\nimport { getAllNotifications, getNewestNotifications, addNotification, updateNotification, deleteNotification, updateAllNotifications, deleteAllNotifications } from \"../apis/notification\";\n\nfunction handleGetNewest(_ref) {\n  var payload, result, data;\n  return _regeneratorRuntime.wrap(function handleGetNewest$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(getNewestNotifications, payload);\n\n        case 4:\n          result = _context.sent;\n          data = get(result, \"data\");\n\n          if (!(data.code !== 200)) {\n            _context.next = 8;\n            break;\n          }\n\n          throw data;\n\n        case 8:\n          _context.next = 10;\n          return put(NotificationActions.onGetNewestSuccess(data.notifications, data.total));\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 16;\n          return put(NotificationActions.onGetNewestError(_context.t0));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 12]]);\n}\n\nfunction handleGetList(_ref2) {\n  var payload, result, data;\n  return _regeneratorRuntime.wrap(function handleGetList$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref2.payload;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(getAllNotifications, payload);\n\n        case 4:\n          result = _context2.sent;\n          data = get(result, \"data\");\n\n          if (!(data.code !== 200)) {\n            _context2.next = 8;\n            break;\n          }\n\n          throw data;\n\n        case 8:\n          _context2.next = 10;\n          return put(NotificationActions.onGetListSuccess(data.notifications, data.total));\n\n        case 10:\n          _context2.next = 16;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 16;\n          return put(NotificationActions.onGetListError(_context2.t0));\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 12]]);\n}\n/**\n *\n * create\n */\n\n\nfunction handleCreate(_ref3) {\n  var payload, result, data;\n  return _regeneratorRuntime.wrap(function handleCreate$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          payload = _ref3.payload;\n          _context3.prev = 1;\n\n          if (!payload) {\n            _context3.next = 11;\n            break;\n          }\n\n          _context3.next = 5;\n          return call(addNotification, payload);\n\n        case 5:\n          result = _context3.sent;\n          data = get(result, \"data\", {});\n\n          if (!(data.code !== 201)) {\n            _context3.next = 9;\n            break;\n          }\n\n          throw data;\n\n        case 9:\n          _context3.next = 11;\n          return put(NotificationActions.onCreateSuccess(data.notification));\n\n        case 11:\n          _context3.next = 17;\n          break;\n\n        case 13:\n          _context3.prev = 13;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 17;\n          return put(NotificationActions.onCreateError(_context3.t0));\n\n        case 17:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 13]]);\n}\n/**\n *\n * update\n */\n\n\nfunction handleUpdate(_ref4) {\n  var payload, result, data;\n  return _regeneratorRuntime.wrap(function handleUpdate$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          payload = _ref4.payload;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return call(updateNotification, payload.id, payload.data);\n\n        case 4:\n          result = _context4.sent;\n          data = get(result, \"data\", {});\n\n          if (!(data.code !== 200)) {\n            _context4.next = 8;\n            break;\n          }\n\n          throw data;\n\n        case 8:\n          _context4.next = 10;\n          return put(NotificationActions.onUpdateSuccess(data));\n\n        case 10:\n          _context4.next = 12;\n          return put(NotificationActions.onGetList(payload.params));\n\n        case 12:\n          _context4.next = 14;\n          return put(NotificationActions.onGetNewest(payload.params));\n\n        case 14:\n          _context4.next = 20;\n          break;\n\n        case 16:\n          _context4.prev = 16;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 20;\n          return put(NotificationActions.onUpdateError(_context4.t0));\n\n        case 20:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 16]]);\n}\n\nfunction handleUpdateAll(_ref5) {\n  var payload, result, data;\n  return _regeneratorRuntime.wrap(function handleUpdateAll$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          payload = _ref5.payload;\n          _context5.prev = 1;\n          _context5.next = 4;\n          return call(updateAllNotifications, payload.data);\n\n        case 4:\n          result = _context5.sent;\n          data = get(result, \"data\", {});\n\n          if (!(data.code !== 200)) {\n            _context5.next = 8;\n            break;\n          }\n\n          throw data;\n\n        case 8:\n          _context5.next = 10;\n          return put(NotificationActions.onUpdateAllSuccess(data));\n\n        case 10:\n          _context5.next = 12;\n          return put(NotificationActions.onGetList(payload.params));\n\n        case 12:\n          _context5.next = 14;\n          return put(NotificationActions.onGetNewest(payload.params));\n\n        case 14:\n          _context5.next = 20;\n          break;\n\n        case 16:\n          _context5.prev = 16;\n          _context5.t0 = _context5[\"catch\"](1);\n          _context5.next = 20;\n          return put(NotificationActions.onUpdateAllError(_context5.t0));\n\n        case 20:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[1, 16]]);\n}\n/**\n *\n * delete\n */\n\n\nfunction handleDelete(_ref6) {\n  var payload, result, data;\n  return _regeneratorRuntime.wrap(function handleDelete$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          payload = _ref6.payload;\n          _context6.prev = 1;\n          _context6.next = 4;\n          return call(deleteNotification, payload.id);\n\n        case 4:\n          result = _context6.sent;\n          data = get(result, \"data\", {});\n\n          if (!(data.code !== 200)) {\n            _context6.next = 8;\n            break;\n          }\n\n          throw data;\n\n        case 8:\n          _context6.next = 10;\n          return put(NotificationActions.onDeleteSuccess(data));\n\n        case 10:\n          _context6.next = 12;\n          return put(NotificationActions.onGetList(payload.params));\n\n        case 12:\n          _context6.next = 14;\n          return put(NotificationActions.onGetNewest(payload.params));\n\n        case 14:\n          _context6.next = 20;\n          break;\n\n        case 16:\n          _context6.prev = 16;\n          _context6.t0 = _context6[\"catch\"](1);\n          _context6.next = 20;\n          return put(NotificationActions.onDeleteError(_context6.t0));\n\n        case 20:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[1, 16]]);\n}\n\nfunction handleDeleteAll(_ref7) {\n  var payload, result, data;\n  return _regeneratorRuntime.wrap(function handleDeleteAll$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          payload = _ref7.payload;\n          _context7.prev = 1;\n          _context7.next = 4;\n          return call(deleteAllNotifications, payload.id);\n\n        case 4:\n          result = _context7.sent;\n          data = get(result, \"data\", {});\n\n          if (!(data.code !== 200)) {\n            _context7.next = 8;\n            break;\n          }\n\n          throw data;\n\n        case 8:\n          _context7.next = 10;\n          return put(NotificationActions.onDeleteAllSuccess(data));\n\n        case 10:\n          _context7.next = 12;\n          return put(NotificationActions.onGetList(payload.params));\n\n        case 12:\n          _context7.next = 14;\n          return put(NotificationActions.onGetNewest(payload.params));\n\n        case 14:\n          _context7.next = 20;\n          break;\n\n        case 16:\n          _context7.prev = 16;\n          _context7.t0 = _context7[\"catch\"](1);\n          _context7.next = 20;\n          return put(NotificationActions.onDeleteAllError(_context7.t0));\n\n        case 20:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[1, 16]]);\n}\n\nexport function watchGetNewest() {\n  return _regeneratorRuntime.wrap(function watchGetNewest$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(NotificationActionTypes.GET_NEWEST, handleGetNewest);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\nexport function watchGetList() {\n  return _regeneratorRuntime.wrap(function watchGetList$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeEvery(NotificationActionTypes.GET_LIST, handleGetList);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\nexport function watchCreate() {\n  return _regeneratorRuntime.wrap(function watchCreate$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeEvery(NotificationActionTypes.CREATE, handleCreate);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\nexport function watchUpdate() {\n  return _regeneratorRuntime.wrap(function watchUpdate$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeEvery(NotificationActionTypes.UPDATE, handleUpdate);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\nexport function watchDelete() {\n  return _regeneratorRuntime.wrap(function watchDelete$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeEvery(NotificationActionTypes.DELETE, handleDelete);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\nexport function watchUpdateAll() {\n  return _regeneratorRuntime.wrap(function watchUpdateAll$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeEvery(NotificationActionTypes.UPDATE_ALL, handleUpdateAll);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\nexport function watchDeleteAll() {\n  return _regeneratorRuntime.wrap(function watchDeleteAll$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeEvery(NotificationActionTypes.DELETE_ALL, handleDeleteAll);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return all([fork(watchGetNewest), fork(watchGetList), fork(watchCreate), fork(watchUpdate), fork(watchDelete), fork(watchUpdateAll), fork(watchDeleteAll)]);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}","map":{"version":3,"sources":["/Users/vyduong/Downloads/CMD_WebBanDienThoai/src/redux/sagas/notification.js"],"names":["handleGetNewest","handleGetList","handleCreate","handleUpdate","handleUpdateAll","handleDelete","handleDeleteAll","watchGetNewest","watchGetList","watchCreate","watchUpdate","watchDelete","watchUpdateAll","watchDeleteAll","rootSaga","takeEvery","fork","all","call","put","get","NotificationActions","NotificationActionTypes","getAllNotifications","getNewestNotifications","addNotification","updateNotification","deleteNotification","updateAllNotifications","deleteAllNotifications","payload","result","data","code","onGetNewestSuccess","notifications","total","onGetNewestError","onGetListSuccess","onGetListError","onCreateSuccess","notification","onCreateError","id","onUpdateSuccess","onGetList","params","onGetNewest","onUpdateError","onUpdateAllSuccess","onUpdateAllError","onDeleteSuccess","onDeleteError","onDeleteAllSuccess","onDeleteAllError","GET_NEWEST","GET_LIST","CREATE","UPDATE","DELETE","UPDATE_ALL","DELETE_ALL"],"mappings":"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","sourcesContent":["import { takeEvery, fork, all, call, put } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport NotificationActions, { NotificationActionTypes } from \"../actions/notification\";\nimport { getAllNotifications, getNewestNotifications, addNotification, updateNotification, deleteNotification, updateAllNotifications, deleteAllNotifications } from \"../apis/notification\";\n\nfunction* handleGetNewest({ payload }) {\n  try {\n    const result = yield call(getNewestNotifications, payload);\n    const data = get(result, \"data\");\n    if (data.code !== 200) throw data;\n    yield put(NotificationActions.onGetNewestSuccess(data.notifications, data.total));\n  } catch (error) {\n    yield put(NotificationActions.onGetNewestError(error));\n  }\n}\n\nfunction* handleGetList({ payload }) {\n  try {\n    const result = yield call(getAllNotifications, payload);\n    const data = get(result, \"data\");\n    if (data.code !== 200) throw data;\n    yield put(NotificationActions.onGetListSuccess(data.notifications, data.total));\n  } catch (error) {\n    yield put(NotificationActions.onGetListError(error));\n  }\n}\n\n/**\n *\n * create\n */\nfunction* handleCreate({ payload }) {\n  try {\n    if(payload){\n      const result = yield call(addNotification, payload);\n      const data = get(result, \"data\", {});\n      if (data.code !== 201) throw data;\n      yield put(NotificationActions.onCreateSuccess(data.notification));\n    }\n  } catch (error) {\n    yield put(NotificationActions.onCreateError(error));\n  }\n}\n\n/**\n *\n * update\n */\nfunction* handleUpdate({ payload }) {\n  try {\n    const result = yield call(updateNotification, payload.id, payload.data);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    yield put(NotificationActions.onUpdateSuccess(data));\n    yield put(NotificationActions.onGetList(payload.params));\n    yield put(NotificationActions.onGetNewest(payload.params));\n  } catch (error) {\n    yield put(NotificationActions.onUpdateError(error));\n  }\n}\n\nfunction* handleUpdateAll({ payload }) {\n  try {\n    const result = yield call(updateAllNotifications, payload.data);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    yield put(NotificationActions.onUpdateAllSuccess(data));\n    yield put(NotificationActions.onGetList(payload.params));\n    yield put(NotificationActions.onGetNewest(payload.params));\n  } catch (error) {\n    yield put(NotificationActions.onUpdateAllError(error));\n  }\n}\n\n/**\n *\n * delete\n */\nfunction* handleDelete({ payload }) {\n  try {\n    const result = yield call(deleteNotification, payload.id);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    yield put(NotificationActions.onDeleteSuccess(data));\n    yield put(NotificationActions.onGetList(payload.params));\n    yield put(NotificationActions.onGetNewest(payload.params));\n  } catch (error) {\n    yield put(NotificationActions.onDeleteError(error));\n  }\n}\n\nfunction* handleDeleteAll({ payload }) {\n  try {\n    const result = yield call(deleteAllNotifications, payload.id);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    yield put(NotificationActions.onDeleteAllSuccess(data));\n    yield put(NotificationActions.onGetList(payload.params));\n    yield put(NotificationActions.onGetNewest(payload.params));\n  } catch (error) {\n    yield put(NotificationActions.onDeleteAllError(error));\n  }\n}\n\nexport function* watchGetNewest() {\n  yield takeEvery(NotificationActionTypes.GET_NEWEST, handleGetNewest);\n}\nexport function* watchGetList() {\n  yield takeEvery(NotificationActionTypes.GET_LIST, handleGetList);\n}\nexport function* watchCreate() {\n  yield takeEvery(NotificationActionTypes.CREATE, handleCreate);\n}\nexport function* watchUpdate() {\n  yield takeEvery(NotificationActionTypes.UPDATE, handleUpdate);\n}\nexport function* watchDelete() {\n  yield takeEvery(NotificationActionTypes.DELETE, handleDelete);\n}\nexport function* watchUpdateAll() {\n  yield takeEvery(NotificationActionTypes.UPDATE_ALL, handleUpdateAll);\n}\nexport function* watchDeleteAll() {\n  yield takeEvery(NotificationActionTypes.DELETE_ALL, handleDeleteAll);\n}\n\nexport default function* rootSaga() {\n  yield all([\n    fork(watchGetNewest),\n    fork(watchGetList),\n    fork(watchCreate),\n    fork(watchUpdate),\n    fork(watchDelete),\n    fork(watchUpdateAll),\n    fork(watchDeleteAll),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}