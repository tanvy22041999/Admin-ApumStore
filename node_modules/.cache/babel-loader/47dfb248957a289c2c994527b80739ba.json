{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\ngota\\\\OneDrive\\\\Documents\\\\GitHub\\\\WebBanDienThoai\\\\CMD_WebBanDienThoai\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleGetList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleFilter),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchGetList),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchFilter),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { takeEvery, fork, all, call, put, delay } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport SpecificationActions, { SpecificationActionTypes } from \"../actions/specification\";\nimport { getAllSpecifications } from \"../apis/specification\";\n\nfunction handleGetList(_ref) {\n  var payload, result, data;\n  return _regeneratorRuntime.wrap(function handleGetList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(getAllSpecifications, payload);\n\n        case 4:\n          result = _context.sent;\n          data = get(result, \"data\");\n          _context.next = 8;\n          return put(SpecificationActions.onGetListSuccess(data.specifications));\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 14;\n          return put(SpecificationActions.onGetListError(_context.t0));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 10]]);\n}\n\nfunction handleFilter(_ref2) {\n  var payload, keyword, result, data;\n  return _regeneratorRuntime.wrap(function handleFilter$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref2.payload;\n          _context2.next = 3;\n          return delay(2000);\n\n        case 3:\n          keyword = payload.keyword;\n          _context2.prev = 4;\n          _context2.next = 7;\n          return call(getAllSpecifications, {\n            keyword: keyword\n          });\n\n        case 7:\n          result = _context2.sent;\n          data = get(result, \"data\");\n          console.log(result);\n          _context2.next = 12;\n          return put(SpecificationActions.onFilterSuccess(data.specifications));\n\n        case 12:\n          _context2.next = 16;\n          break;\n\n        case 14:\n          _context2.prev = 14;\n          _context2.t0 = _context2[\"catch\"](4);\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[4, 14]]);\n}\n\nexport function watchGetList() {\n  return _regeneratorRuntime.wrap(function watchGetList$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(SpecificationActionTypes.GET_LIST, handleGetList);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function watchFilter() {\n  return _regeneratorRuntime.wrap(function watchFilter$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SpecificationActionTypes.FILTER, handleFilter);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchGetList), fork(watchFilter)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/ngota/OneDrive/Documents/GitHub/WebBanDienThoai/CMD_WebBanDienThoai/src/redux/sagas/specification.js"],"names":["handleGetList","handleFilter","watchGetList","watchFilter","rootSaga","takeEvery","fork","all","call","put","delay","get","SpecificationActions","SpecificationActionTypes","getAllSpecifications","payload","result","data","onGetListSuccess","specifications","onGetListError","keyword","console","log","onFilterSuccess","GET_LIST","FILTER"],"mappings":";;oDAKUA,a;qDAWAC,Y;qDAaOC,Y;qDAIAC,W;qDAIQC,Q;;AArCzB,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,KAA1C,QAAuD,oBAAvD;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,oBAAP,IAA+BC,wBAA/B,QAA+D,0BAA/D;AACA,SAASC,oBAAT,QAAqC,uBAArC;;AAEA,SAAUd,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0Be,UAAAA,OAA1B,QAA0BA,OAA1B;AAAA;AAAA;AAEmB,iBAAMP,IAAI,CAACM,oBAAD,EAAuBC,OAAvB,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAGUC,UAAAA,IAHV,GAGiBN,GAAG,CAACK,MAAD,EAAS,MAAT,CAHpB;AAAA;AAII,iBAAMP,GAAG,CAACG,oBAAoB,CAACM,gBAArB,CAAsCD,IAAI,CAACE,cAA3C,CAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMI,iBAAMV,GAAG,CAACG,oBAAoB,CAACQ,cAArB,aAAD,CAAT;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAUnB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBc,UAAAA,OAAzB,SAAyBA,OAAzB;AAAA;AACE,iBAAML,KAAK,CAAC,IAAD,CAAX;;AADF;AAEUW,UAAAA,OAFV,GAEsBN,OAFtB,CAEUM,OAFV;AAAA;AAAA;AAImB,iBAAMb,IAAI,CAACM,oBAAD,EAAuB;AAACO,YAAAA,OAAO,EAAPA;AAAD,WAAvB,CAAV;;AAJnB;AAIUL,UAAAA,MAJV;AAKUC,UAAAA,IALV,GAKiBN,GAAG,CAACK,MAAD,EAAS,MAAT,CALpB;AAMIM,UAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AANJ;AAOI,iBAAMP,GAAG,CAACG,oBAAoB,CAACY,eAArB,CAAqCP,IAAI,CAACE,cAA1C,CAAD,CAAT;;AAPJ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,OAAO,SAAUjB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMG,SAAS,CAACQ,wBAAwB,CAACY,QAA1B,EAAoCzB,aAApC,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAME,SAAS,CAACQ,wBAAwB,CAACa,MAA1B,EAAkCzB,YAAlC,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMG,GAAG,CAAC,CACRD,IAAI,CAACJ,YAAD,CADI,EAERI,IAAI,CAACH,WAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, fork, all, call, put, delay } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport SpecificationActions, { SpecificationActionTypes } from \"../actions/specification\";\nimport { getAllSpecifications } from \"../apis/specification\";\n\nfunction* handleGetList({ payload }) {\n  try {\n    const result = yield call(getAllSpecifications, payload);\n    const data = get(result, \"data\");\n    yield put(SpecificationActions.onGetListSuccess(data.specifications));\n  } catch (error) {\n    yield put(SpecificationActions.onGetListError(error));\n  }\n}\n\n\nfunction* handleFilter({ payload }) {\n  yield delay(2000);\n  const { keyword } = payload;\n  try {\n    const result = yield call(getAllSpecifications, {keyword});\n    const data = get(result, \"data\");\n    console.log(result)\n    yield put(SpecificationActions.onFilterSuccess(data.specifications));\n  } catch (error) {\n    //yield put(SpecificationActions.onGetListError(error));\n  }\n}\n\nexport function* watchGetList() {\n  yield takeEvery(SpecificationActionTypes.GET_LIST, handleGetList);\n}\n\nexport function* watchFilter() {\n  yield takeEvery(SpecificationActionTypes.FILTER, handleFilter);\n}\n\nexport default function* rootSaga() {\n  yield all([\n    fork(watchGetList),\n    fork(watchFilter),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}