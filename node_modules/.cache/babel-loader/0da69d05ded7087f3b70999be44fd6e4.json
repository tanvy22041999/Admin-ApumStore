{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\ngota\\\\OneDrive\\\\Documents\\\\GitHub\\\\WebBanDienThoai\\\\CMD_WebBanDienThoai\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleGetList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleGetDetail),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchGetList),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchGetDetail),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { takeEvery, fork, all, call, put } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport ImagesActions, { ImagesActionTypes } from \"../actions/cloudinary\";\nimport { getImage, getAllImages } from \"../apis/cloudinary\";\n\nfunction handleGetList(_ref) {\n  var payload, result, data;\n  return _regeneratorRuntime.wrap(function handleGetList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(getAllImages, payload);\n\n        case 4:\n          result = _context.sent;\n          data = get(result, \"data\");\n          console.log(\"data\", data);\n          _context.next = 9;\n          return put(ImagesActions.onGetListSuccess(data.product));\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 15;\n          return put(ImagesActions.onGetListError(_context.t0));\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 11]]);\n}\n\nfunction handleGetDetail(_ref2) {\n  var id, result, data;\n  return _regeneratorRuntime.wrap(function handleGetDetail$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          id = _ref2.id;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(getImage, id);\n\n        case 4:\n          result = _context2.sent;\n          data = get(result, \"data\");\n          console.log(\"data\", data);\n          _context2.next = 9;\n          return put(ImagesActions.onGetAnImageSuccess(data.images));\n\n        case 9:\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 15;\n          return put(ImagesActions.onGetAnImageError(_context2.t0));\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 11]]);\n}\n/**\n *\n * create\n */\n\n/* function* handleCreate({ payload, filters, callback, merchant_id }) {\n  console.log(\"load\",payload);\n  try {\n    const result = yield call(EcommerceApi.Product.create, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    message.success(\"Create product success!\");\n    if (callback) {\n      callback();\n    }\n    yield put(ProductsActions.onCreateSuccess(data));\n    yield put(ProductsActions.onGetList(filters));\n    if(merchant_id){\n      yield put(MerchantActions.onGetListProduct({id:merchant_id}));\n    }\n  } catch (error) {\n    console.log(error);\n    message.error(get(error, \"msg\", \"Error when create product!\"));\n    yield put(ProductsActions.onCreateError(error));\n  }\n} */\n\n/**\n *\n * update\n */\n\n/* function* handleUpdate({ payload, filters, callback, merchant_id }) {\n\n  try {\n    const result = yield call(EcommerceApi.Product.update, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    message.success(\"Update product success!\");\n    if (callback) {\n      callback();\n    }\n\n    const detailResult = yield call(EcommerceApi.Product.getDetail, payload.id);\n    yield put(ProductsActions.onUpdateSuccess(get(detailResult, \"data\")));\n    yield put(ProductsActions.onGetList(filters));\n    if(merchant_id){\n      yield put(MerchantActions.onGetListProduct({id:merchant_id}));\n    }\n  } catch (error) {\n    console.log(error);\n    message.error(get(error, \"msg\", \"Error when Update product!\"));\n    yield put(ProductsActions.onUpdateError(error));\n  }\n} */\n\n/**\n *\n * delete\n */\n\n/* function* handleDelete({ id, filters, callback, merchant_id }) {\n  try {\n    const result = yield call(EcommerceApi.Product.delete, id);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    message.success(\"Delete product success!\");\n    if (callback) {\n      callback();\n    }\n    yield put(ProductsActions.onDeleteSuccess(data));\n    yield put(ProductsActions.onGetList(filters));\n    if(merchant_id){\n      yield put(MerchantActions.onGetListProduct({id:merchant_id}));\n    }\n  } catch (error) {\n    console.log(error);\n    message.error(get(error, \"msg\", \"Error when Delete product!\"));\n    yield put(ProductsActions.onDeleteError(error));\n  }\n} */\n\n/**\n *\n */\n\n\nexport function watchGetList() {\n  return _regeneratorRuntime.wrap(function watchGetList$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(ImagesActionTypes.GET_LIST, handleGetList);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function watchGetDetail() {\n  return _regeneratorRuntime.wrap(function watchGetDetail$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(ImagesActionTypes.GET_DETAIL, handleGetDetail);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n/*\nexport function* watchCreate() {\n  yield takeEvery(ProductsActionTypes.CREATE, handleCreate);\n}\nexport function* watchUpdate() {\n  yield takeEvery(ProductsActionTypes.UPDATE, handleUpdate);\n}\nexport function* watchDelete() {\n  yield takeEvery(ProductsActionTypes.DELETE, handleDelete);\n} */\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchGetList), fork(watchGetDetail)\n          /* fork(watchGetDetail),\n          fork(watchCreate),\n          fork(watchUpdate),\n          fork(watchDelete), */\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/ngota/OneDrive/Documents/GitHub/WebBanDienThoai/CMD_WebBanDienThoai/src/redux/sagas/cloudinary.js"],"names":["handleGetList","handleGetDetail","watchGetList","watchGetDetail","rootSaga","takeEvery","fork","all","call","put","get","ImagesActions","ImagesActionTypes","getImage","getAllImages","payload","result","data","console","log","onGetListSuccess","product","onGetListError","id","onGetAnImageSuccess","images","onGetAnImageError","GET_LIST","GET_DETAIL"],"mappings":";;oDAKUA,a;qDAWAC,e;qDA8FOC,Y;qDAGAC,c;qDAeQC,Q;;AAhIzB,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,GAArC,QAAgD,oBAAhD;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,aAAP,IAAwBC,iBAAxB,QAAiD,uBAAjD;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,oBAAvC;;AAEA,SAAUd,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0Be,UAAAA,OAA1B,QAA0BA,OAA1B;AAAA;AAAA;AAEmB,iBAAMP,IAAI,CAACM,YAAD,EAAeC,OAAf,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAGUC,UAAAA,IAHV,GAGiBP,GAAG,CAACM,MAAD,EAAS,MAAT,CAHpB;AAIIE,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBF,IAAnB;AAJJ;AAKI,iBAAMR,GAAG,CAACE,aAAa,CAACS,gBAAd,CAA+BH,IAAI,CAACI,OAApC,CAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOI,iBAAMZ,GAAG,CAACE,aAAa,CAACW,cAAd,aAAD,CAAT;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAUrB,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4BsB,UAAAA,EAA5B,SAA4BA,EAA5B;AAAA;AAAA;AAEmB,iBAAMf,IAAI,CAACK,QAAD,EAAWU,EAAX,CAAV;;AAFnB;AAEUP,UAAAA,MAFV;AAGUC,UAAAA,IAHV,GAGiBP,GAAG,CAACM,MAAD,EAAS,MAAT,CAHpB;AAIIE,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBF,IAAnB;AAJJ;AAKI,iBAAMR,GAAG,CAACE,aAAa,CAACa,mBAAd,CAAkCP,IAAI,CAACQ,MAAvC,CAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOI,iBAAMhB,GAAG,CAACE,aAAa,CAACe,iBAAd,cAAD,CAAT;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;AAIA,OAAO,SAAUxB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMG,SAAS,CAACO,iBAAiB,CAACe,QAAnB,EAA6B3B,aAA7B,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGP,OAAO,SAAUG,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAME,SAAS,CAACO,iBAAiB,CAACgB,UAAnB,EAA+B3B,eAA/B,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP;;;;;;;;;;;AAWA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMG,GAAG,CAAC,CACRD,IAAI,CAACJ,YAAD,CADI,EAERI,IAAI,CAACH,cAAD;AACJ;;;;AAHQ,WAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, fork, all, call, put } from \"redux-saga/effects\";\nimport { get } from \"lodash\";\nimport ImagesActions, { ImagesActionTypes } from \"../actions/cloudinary\";\nimport { getImage, getAllImages } from \"../apis/cloudinary\";\n\nfunction* handleGetList({ payload }) {\n  try {\n    const result = yield call(getAllImages, payload);\n    const data = get(result, \"data\");\n    console.log(\"data\",data)\n    yield put(ImagesActions.onGetListSuccess(data.product));\n  } catch (error) {\n    yield put(ImagesActions.onGetListError(error));\n  }\n}\n\nfunction* handleGetDetail({ id }) {\n  try {\n    const result = yield call(getImage, id);\n    const data = get(result, \"data\");\n    console.log(\"data\",data)\n    yield put(ImagesActions.onGetAnImageSuccess(data.images));\n  } catch (error) {\n    yield put(ImagesActions.onGetAnImageError(error));\n  }\n}\n\n/**\n *\n * create\n */\n/* function* handleCreate({ payload, filters, callback, merchant_id }) {\n  console.log(\"load\",payload);\n  try {\n    const result = yield call(EcommerceApi.Product.create, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    message.success(\"Create product success!\");\n    if (callback) {\n      callback();\n    }\n    yield put(ProductsActions.onCreateSuccess(data));\n    yield put(ProductsActions.onGetList(filters));\n    if(merchant_id){\n      yield put(MerchantActions.onGetListProduct({id:merchant_id}));\n    }\n  } catch (error) {\n    console.log(error);\n    message.error(get(error, \"msg\", \"Error when create product!\"));\n    yield put(ProductsActions.onCreateError(error));\n  }\n} */\n\n/**\n *\n * update\n */\n/* function* handleUpdate({ payload, filters, callback, merchant_id }) {\n\n  try {\n    const result = yield call(EcommerceApi.Product.update, payload);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    message.success(\"Update product success!\");\n    if (callback) {\n      callback();\n    }\n\n    const detailResult = yield call(EcommerceApi.Product.getDetail, payload.id);\n    yield put(ProductsActions.onUpdateSuccess(get(detailResult, \"data\")));\n    yield put(ProductsActions.onGetList(filters));\n    if(merchant_id){\n      yield put(MerchantActions.onGetListProduct({id:merchant_id}));\n    }\n  } catch (error) {\n    console.log(error);\n    message.error(get(error, \"msg\", \"Error when Update product!\"));\n    yield put(ProductsActions.onUpdateError(error));\n  }\n} */\n\n/**\n *\n * delete\n */\n/* function* handleDelete({ id, filters, callback, merchant_id }) {\n  try {\n    const result = yield call(EcommerceApi.Product.delete, id);\n    const data = get(result, \"data\", {});\n    if (data.code !== 200) throw data;\n    message.success(\"Delete product success!\");\n    if (callback) {\n      callback();\n    }\n    yield put(ProductsActions.onDeleteSuccess(data));\n    yield put(ProductsActions.onGetList(filters));\n    if(merchant_id){\n      yield put(MerchantActions.onGetListProduct({id:merchant_id}));\n    }\n  } catch (error) {\n    console.log(error);\n    message.error(get(error, \"msg\", \"Error when Delete product!\"));\n    yield put(ProductsActions.onDeleteError(error));\n  }\n} */\n\n/**\n *\n */\n\nexport function* watchGetList() {\n  yield takeEvery(ImagesActionTypes.GET_LIST, handleGetList);\n}\nexport function* watchGetDetail() {\n  yield takeEvery(ImagesActionTypes.GET_DETAIL, handleGetDetail);\n}\n\n/*\nexport function* watchCreate() {\n  yield takeEvery(ProductsActionTypes.CREATE, handleCreate);\n}\nexport function* watchUpdate() {\n  yield takeEvery(ProductsActionTypes.UPDATE, handleUpdate);\n}\nexport function* watchDelete() {\n  yield takeEvery(ProductsActionTypes.DELETE, handleDelete);\n} */\n\nexport default function* rootSaga() {\n  yield all([\n    fork(watchGetList),\n    fork(watchGetDetail),\n    /* fork(watchGetDetail),\n    fork(watchCreate),\n    fork(watchUpdate),\n    fork(watchDelete), */\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}